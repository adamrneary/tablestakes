// Generated by CoffeeScript 1.4.0
var columns, data, dragDestination, draggable, findByID, grid, isChild, onDragHandler;

data = [
  {
    id: "NVD3",
    type: "ahaha",
    values: [
      {
        id: "Charts",
        _values: [
          {
            id: "Simple Line",
            type: "Historical"
          }, {
            id: "Scatter / Bubble",
            type: "Snapshot"
          }, {
            id: "Stacked / Stream / Expanded Area",
            type: "Historical"
          }, {
            id: "Discrete Bar",
            type: "Snapshot"
          }, {
            id: "Grouped / Stacked Multi-Bar",
            type: "Snapshot / Historical"
          }, {
            id: "Horizontal Grouped Bar",
            type: "Snapshot"
          }, {
            id: "Line and Bar Combo",
            type: "Historical"
          }, {
            id: "Cumulative Line",
            type: "Historical"
          }, {
            id: "Line with View Finder",
            type: "Historical"
          }
        ]
      }, {
        id: "Chart Components",
        type: "Universal"
      }
    ]
  }, {
    id: "New Root",
    type: "tatata"
  }
];

columns = [
  {
    id: "id",
    label: "Name",
    isNested: true
  }, {
    id: "type",
    label: "Type"
  }
];

findByID = function(data, id, removeElement) {
  var result;
  result = null;
  _.each(data, function(d, i) {
    var obj, values;
    if (d.id === id) {
      if (removeElement) {
        data.splice(i, 1);
      }
      result = d;
    }
    values = d.values || d._values;
    if (values != null) {
      obj = findByID(values, id, removeElement);
    }
    if (obj != null) {
      return result = obj;
    }
  });
  return result;
};

isChild = function(childID, parentID) {
  var parent, values;
  parent = findByID(data, parentID);
  values = parent.values || parent._values || [];
  return findByID(values, childID);
};

onDragHandler = function(objectID, targetID) {
  var draggedObject, target, values;
  console.log(isChild(targetID, objectID));
  if ((targetID != null) && (objectID != null) && !isChild(targetID, objectID)) {
    target = findByID(data, targetID);
    draggedObject = findByID(data, objectID, true);
    values = target.values || (target._values != null) || (target.values = []);
    values.push(draggedObject);
    return grid.data(data).render();
  }
};

dragDestination = function(d) {
  return d.depth > 1;
};

draggable = function(d) {
  return d.depth > 1;
};

grid = new window.TableStakes().el('#example').columns(columns).data(data).isDraggable(draggable).dragMode('hierarchy').isDragDestination(dragDestination).onDrag(onDragHandler).render();
