// Generated by CoffeeScript 1.4.0
var table;

table = null;

describe("Table: ", function() {
  var columns, data, grid;
  data = [
    {
      key: 'Example1',
      type: "ahaha"
    }, {
      key: "Simple Line",
      type: "Historical"
    }, {
      key: "Scatter / Bubble",
      type: "Snapshot"
    }, {
      key: "Stacked / Stream / Expanded Area",
      type: "Historical"
    }, {
      key: "Discrete Bar",
      type: "Snapshot"
    }, {
      key: "Grouped / Stacked Multi-Bar",
      type: "Snapshot / Historical"
    }, {
      key: "Horizontal Grouped Bar",
      type: "Snapshot"
    }, {
      key: "Line and Bar Combo",
      type: "Historical"
    }, {
      key: "Cumulative Line",
      type: "Historical"
    }, {
      key: "Line with View Finder",
      type: "Historical"
    }, {
      key: "Legend",
      type: "Universal"
    }, {
      key: "New Root",
      type: "tatata"
    }, {
      key: "1",
      type: "123"
    }
  ];
  columns = [
    {
      key: "key",
      label: "Name",
      showCount: false,
      width: "400px",
      isEditable: true,
      classes: "row-heading"
    }, {
      key: "type",
      label: "Type",
      width: "300px",
      isEditable: false
    }
  ];
  grid = new window.TablesStakes({
    columns: columns,
    data: data,
    el: "#example"
  });
  grid.render();
  table = new window.TablesStakes;
  it('window.tablestakes is function', function(done) {
    assert(window.TablesStakes);
    assert(typeof window.TablesStakes === 'function');
    return done();
  });
  it('constructor', function(done) {
    assert(table);
    return done();
  });
  it('table options', function(done) {
    typeof table.filterCondition === 'object';
    table.filterCondition === 'd3_Map';
    typeof table.core === 'object';
    table.core === 'core';
    typeof table.events === 'object';
    table.events === 'events';
    typeof table.utils === 'object';
    table.utils === 'utils';
    return done();
  });
  it('render', function(done) {
    assert(typeof table.render === 'function');
    assert(table.render);
    return done();
  });
  it('update', function(done) {
    assert(typeof table.update === 'function');
    assert(table.update);
    return done();
  });
  it('update  with argument', function(done) {
    var _this = this;
    d3.select(table.get('el')).datum(table.gridFilteredData).call(function(selection) {
      return assert(table.update(selection));
    });
    return done();
  });
  it('dispatchManualEvent', function(done) {
    assert(typeof table.dispatchManualEvent === 'function');
    assert(table.dispatchManualEvent);
    return done();
  });
  it('setID', function(done) {
    assert(typeof table.setID === 'function');
    assert(table.setID);
    return done();
  });
  it('attributes options', function(done) {
    assert(typeof table.attributes === 'object');
    assert(typeof table.attributes.columns === 'object');
    assert(table.attributes.columns.length === columns.length);
    assert(typeof table.attributes.data === 'object');
    assert(table.attributes.data.length === data.length);
    assert(table.attributes.el === "#example");
    assert(table.attributes.reorder_dragging === false);
    assert(table.attributes.deletable === false);
    assert(table.attributes.filterable === false);
    assert(table.attributes.nested === false);
    assert(table.attributes.resizable === false);
    assert(table.attributes.sortable === false);
    return done();
  });
  it('attributes reorder_dragging', function(done) {
    grid.reorder_dragging(true);
    assert(table.attributes.reorder_dragging === true);
    return done();
  });
  it('attributes deletable', function(done) {
    grid.isDeletable(true);
    assert(table.attributes.deletable === true);
    return done();
  });
  it('attributes filterable', function(done) {
    grid.filterable(true);
    assert(table.attributes.filterable === true);
    return done();
  });
  it('attributes nested', function(done) {
    grid.nested(true);
    assert(table.attributes.nested === true);
    return done();
  });
  it('attributes resizable', function(done) {
    grid.resizable(true);
    assert(table.attributes.resizable === true);
    return done();
  });
  it('table.set(testdata) and table.get(testdata)', function(done) {
    table.attributes = {
      deletable: false
    };
    assert(table.set('deletable', true));
    assert(table.get('deletable') === true);
    return done();
  });
  it('table.is(testdata)', function(done) {
    table.attributes = {
      deletable: true
    };
    assert(table.is('deletable') === true);
    return done();
  });
  it('table.margin(testdata)', function(done) {
    var testHash;
    testHash = {
      top: 40,
      right: 10,
      bottom: 30,
      left: 50
    };
    assert(table.margin(testHash) === table);
    assert(table.margin()['top'] === 40);
    assert(table.margin()['right'] === 10);
    assert(table.margin()['bottom'] === 30);
    assert(table.margin()['left'] === 50);
    assert(table.margin.top === 40);
    assert(table.margin.right === 10);
    assert(table.margin.bottom === 30);
    assert(table.margin.left === 50);
    return done();
  });
  it('table.Sortable is true', function(done) {
    assert(typeof table.Sortable === 'function');
    assert(table.Sortable(true));
    return done();
  });
  it('setFilter', function(done) {
    assert(typeof table.setFilter === 'function');
    assert(grid.setFilter(grid.gridFilteredData[0], grid.filterCondition));
    return done();
  });
  return it('filter', function(done) {
    data = data[0];
    assert(typeof table.filter === 'function');
    assert(grid.filter('key', 'S'));
    assert(grid.filterCondition.get('key') === 'S');
    return done();
  });
});

describe("Table: test function", function() {
  table = new window.TablesStakes;
  it('editable', function(done) {
    assert(table.editable(true));
    return done();
  });
  it('isDeletable', function(done) {
    assert(table.isDeletable(true));
    return done();
  });
  it('nested', function(done) {
    assert(table.nested(true));
    return done();
  });
  it('boolean', function(done) {
    assert(table.boolean(true));
    return done();
  });
  it('filterable', function(done) {
    assert(table.filterable(true));
    return done();
  });
  it('hierarchy_dragging', function(done) {
    assert(table.hierarchy_dragging(true));
    return done();
  });
  it('resizable', function(done) {
    assert(table.resizable(true));
    return done();
  });
  return it('reorder_dragging', function(done) {
    assert(table.reorder_dragging(true));
    return done();
  });
});

describe("Events", function() {
  var event;
  event = window.TablesStakesLib.events;
  it('window.TablesStakesLib.events is function', function(done) {
    assert(typeof window.TablesStakesLib.events === 'function');
    assert(window.TablesStakesLib.events);
    return done();
  });
  return it('events constructor', function(done) {
    assert(event);
    return done();
  });
});
