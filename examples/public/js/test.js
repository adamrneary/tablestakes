// Generated by CoffeeScript 1.4.0

describe("Events", function() {
  var event;
  event = null;
  it('window.TableStakesLib.Events is function', function(done) {
    assert(typeof window.TableStakesLib.Events === 'function');
    assert(window.TableStakesLib.Events);
    return done();
  });
  it('events constructor', function(done) {
    event = new window.TableStakesLib.Events({
      core: {}
    });
    assert(event);
    return done();
  });
  return it('resizeDrag', function(done) {
    assert(event.resizeDrag);
    return done();
  });
});

describe("Tablestakes API ", function() {
  var table;
  table = null;
  it('is a function', function(done) {
    assert(window.TableStakes);
    assert(typeof window.TableStakes === 'function');
    return done();
  });
  it('has a basic constructor', function(done) {
    table = new window.TableStakes;
    assert(table);
    return done();
  });
  describe("chainable getter/setter methods for most internal attributes", function() {
    return it('should return the value set by the same method', function() {
      var attributes;
      attributes = ['data', 'isDeletable', 'onDelete', 'isResizable', 'isSortable', 'dragMode', 'isDraggable', 'onDrag', 'isDragDestination', 'el', 'rowClasses'];
      return _.each(attributes, function(attribute) {
        var testVal;
        testVal = Math.random();
        assert(table[attribute](testVal) === table);
        return assert(table[attribute]() === testVal);
      });
    });
  });
  describe("margin", function() {
    it('can set all margin attributes at once', function(done) {
      var testHash;
      testHash = {
        top: 40,
        right: 10,
        bottom: 30,
        left: 50
      };
      assert(table.margin(testHash) === table);
      assert(table.margin()['top'] === 40);
      assert(table.margin()['right'] === 10);
      assert(table.margin()['bottom'] === 30);
      assert(table.margin()['left'] === 50);
      return done();
    });
    return it('can set 1-2 margin attributes at a time', function(done) {
      var testHash;
      testHash = {
        top: 40,
        right: 10,
        bottom: 30,
        left: 50
      };
      assert(table.margin(testHash) === table);
      assert(table.margin({
        top: 100
      }) === table);
      assert(table.margin({
        left: 200,
        right: 300
      }) === table);
      assert(table.margin()['top'] === 100);
      assert(table.margin()['right'] === 300);
      assert(table.margin()['bottom'] === 30);
      assert(table.margin()['left'] === 200);
      return done();
    });
  });
  describe("columns", function() {
    return it('returns table on set and an array of Columns on get');
  });
  it('table options', function(done) {
    typeof table.filterCondition === 'object';
    table.filterCondition === 'd3_Map';
    typeof table.core === 'object';
    table.core === 'core';
    typeof table.events === 'object';
    table.events === 'events';
    typeof table.utils === 'object';
    table.utils === 'utils';
    return done();
  });
  it('render', function(done) {
    assert(typeof table.render === 'function');
    assert(table.render);
    return done();
  });
  it('update', function(done) {
    assert(typeof table.update === 'function');
    assert(table.update);
    return done();
  });
  it('dispatchManualEvent', function(done) {
    assert(typeof table.dispatchManualEvent === 'function');
    assert(table.dispatchManualEvent);
    return done();
  });
  return it('setID', function(done) {
    assert(typeof table.setID === 'function');
    assert(table.setID);
    return done();
  });
});

describe('unit tests', function() {
  before(function(done) {
    return glob.zombie.visit(glob.url, function(e, _browser) {
      var $, browser, window, _;
      browser = _browser;
      window = browser.window;
      $ = window.$;
      _ = window._;
      global.browser = browser;
      global.window = window;
      global.d3 = browser.window.d3;
      global._ = window._;
      if (glob.report) {
        require(__dirname + '/../cov/tablestakes.js');
      }
      return done();
    });
  });
  require('./tablestakes_test');
  require('./column_test');
  return require('./events_test');
});

describe("column", function() {
  return it('constructor', function(done) {
    var column;
    column = new window.TableStakesLib.Column({
      a: 'b'
    });
    assert(column);
    return done();
  });
});
